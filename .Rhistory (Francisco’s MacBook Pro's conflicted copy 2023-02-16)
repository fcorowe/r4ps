#| include = FALSE
rm(list=ls())
#| warning: false
# load package
library(wpgpDownloadR)
library(terra)
library(stars)
library(sf)
library(tidyverse)
library(viridis)
library(RColorBrewer)
wpgpListCountries()
file_list <- fs::dir_ls("./data/sequence-analysis/raster")
pop2000_raster <- read_stars("./data/sequence-analysis/ukr_ppp_2000_1km_Aggregated.tif")
file_list
?map_df
file_list
big_df <- file_list %>%
map_dfr( read_stars, .id = "filename")
rastlist <- list.files(path = "./data/sequence-analysis/raster", pattern='.TIF$',
all.files=TRUE, full.names=FALSE)
rastlist
rastlist <- list.files(path = "./data/sequence-analysis/raster/", pattern='.TIF$', all.files=TRUE, full.names=FALSE)
rastlist
pop2000_raster <- read_stars("./data/sequence-analysis/raster/ukr_ppp_2000_1km_Aggregated.tif")
library(sf)
library(stringr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(viridis)
library(plotrix)
#| warning: false
#Support for simple features, a standardised way to encode spatial vector data
library(sf)
#Data manipulation
library(dplyr)
#A system for creating graphics
library(ggplot2)
#Easy viisualisation of a correlation matrix using ggplot2
library(ggcorrplot)
#Color maps designed to improve graph readability
library(viridis)
#Alternative way of plotting, useful for radial plots
library(plotrix)
#Methods for cluster analysis
library(cluster)
#Thematic maps can be generated with great flexibility
library(tmap)
#Provides some easy-to-use functions to extract and visualize the output of multivariate data analyses
library(factoextra)
# Import LSOA demographic data for GLA
# The raw data can be obtained from link below, but it has been cleaned by Carmen Cabrera-Arnau for this chapter
# https://data.london.gov.uk/dataset/lsoa-atlas
df_LSOA <- read.csv("./data/geodemographics/lsoa-data-clean.csv")
# Import LSOA boundaries for GLA
st_LSOA <- st_read("./data/geodemographics/LSOA_2011_London_gen_MHW/LSOA_2011_London_gen_MHW.shp")
plot(st_geometry(st_LSOA), border=adjustcolor("gray20", alpha.f=0.4), lwd=0.6)
head(df_LSOA[,1:4])
names(df_LSOA[,1:4])
names(df_LSOA[,1:8])
getwd()
?Traminer
#| warning: false
# load package
library(wpgpDownloadR) # you may need to install this package running `install.packages("devtools")` `devtools::install_github("wpgp/wpgpDownloadR")'
library(stars)
library(sf)
library(tidyverse)
library(viridis)
library(RColorBrewer)
library(patchwork)
library(ggseqplot) # may need to install by running `devtools::install_github("maraab23/ggseqplot")`
library(TraMineR)
library(cluster)
?\TraMineR
?TraMineR
?stars
?stars
#| include = FALSE
# clear memory and adds tufte templates for plots and maps
rm(list=ls())
source("data-viz-themes.R")
#| warning: false
# load package
library(wpgpDownloadR) # you may need to install this package running `install.packages("devtools")` `devtools::install_github("wpgp/wpgpDownloadR")'
library(stars)
library(sf)
library(tidyverse)
library(viridis)
library(RColorBrewer)
library(patchwork)
library(ggseqplot) # may need to install by running `devtools::install_github("maraab23/ggseqplot")`
library(TraMineR)
library(cluster)
??stars
?read_stars
require(usethis)
edit_r_environ(scope = "project")
Sys.getenv("OPENAI_API_KEY")
require(usethis)
edit_r_environ(scope = "project")
Sys.setenv(OPENAI_API_KEY = "<APIKEY>")
Sys.setenv(OPENAI_API_KEY = "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")
require(usethis)
edit_r_environ(scope = "project")
rlang::last_error()
rlang::last_trace()
#| include = FALSE
# clear memory and adds tufte templates for plots and maps
rm(list=ls())
source("data-viz-themes.R")
#| warning: false
# data manipulation
library(tidyverse)
# spatial data manipulation
library(stars)
library(sf)
# download world pop data
library(wpgpDownloadR) # you may need to install this package running `install.packages("devtools")` `devtools::install_github("wpgp/wpgpDownloadR")'
# data visualisation
library(viridis)
library(RColorBrewer)
library(patchwork)
library(ggseqplot) # may need to install by running `devtools::install_github("maraab23/ggseqplot")`
# sequence analysis
library(TraMineR)
# cluster analysis
library(cluster)
wpgpListCountries() %>%
head()
wpgpListCountryDatasets(ISO3 = "UKR") %>%
head()
#| warning: false
# data manipulation
library(tidyverse)
# spatial data manipulation
library(stars)
library(sf)
# download world pop data
library(wpgpDownloadR) # you may need to install this package running `install.packages("devtools")` `devtools::install_github("wpgp/wpgpDownloadR")'
# data visualisation
library(viridis)
library(RColorBrewer)
library(patchwork)
library(ggseqplot) # may need to install by running `devtools::install_github("maraab23/ggseqplot")`
# sequence analysis
library(TraMineR)
# cluster analysis
library(cluster)
#| include = FALSE
# clear memory and adds tufte templates for plots and maps
rm(list=ls())
source("data-viz-themes.R")
#| warning: false
#|
file_list <- fs::dir_ls("./data/sequence-analysis/raster")
file_list
pop_raster <- read_stars(file_list, quiet = TRUE)
file_list <- fs::dir_ls("./data/sequence-analysis/raster")
file_list
ukr_shp <- st_read("./data/sequence-analysis/ukr_shp/gadm41_UKR_2.shp") %>%
st_simplify(.,
preserveTopology = T,
dTolerance = 1000) %>%  # 1km
sf::st_make_valid(.) %>%
fortify(.) %>%
st_transform(., "EPSG:4326")
ukr_shp
plot(pop_raster[1], col = inferno(100))
?fortify
plot(ukr_shp$geometry)
?st_transform
pop_raster <- st_transform(pop_raster, st_crs(ukr_shp))
system.time({
popbyarea_df = aggregate(x = pop_raster,
by = ukr_shp,
FUN = sum,
na.rm = TRUE)
})
popbyarea_df[1]
# create a function to bind the population data frame to the shapefile
add_population <- function(x) mutate(ukr_shp,
population = x)
# obtain sub-national population counts
ukr_eshp <- lapply(popbyarea_df, add_population)
# create a dataframe with subnational populations
select_pop <- function(x) dplyr::select(x, GID_2, NAME_2, population)
population_df <- lapply(ukr_eshp, select_pop) %>%
do.call(rbind, .)
population_df$year <- rep(seq(2000, 2020, by=1), times = 1)
rownames(population_df) <- rep(seq(1, nrow(population_df), by=1), times = 1)
population_df
# create a function to bind the population data frame to the shapefile
add_population <- function(x) mutate(ukr_shp,
population = x)
# obtain sub-national population counts
ukr_eshp <- lapply(popbyarea_df, add_population)
# create a dataframe with subnational populations
select_pop <- function(x) dplyr::select(x, GID_2, NAME_2, population)
population_df <- lapply(ukr_eshp, select_pop) %>%
do.call(rbind, .)
population_df$year <- rep(seq(2000, 2020, by=1), times = 1)
rownames(population_df) <- rep(seq(1, nrow(population_df), by=1), times = 1)
population_df
# obtain national population counts
population_count <- map_dbl(ukr_eshp, ~.x %>%
pull(population) %>%
sum(na.rm = TRUE)
) %>%
as.data.frame()
# change labels
df_names <- c("2000", "2020")
colnames(population_count) <-  c("population")
rownames(population_count) <- rep(seq(2000, 2020, by=1), times = 1)
population_count$year <- rep(seq(2000, 2020, by=1), times = 1)
# national annual population counts
population_count
# obtain national population counts
population_count <- map_dbl(ukr_eshp, ~.x %>%
pull(population) %>%
sum(na.rm = TRUE)
) %>%
as.data.frame()
# change labels
colnames(population_count) <-  c("population")
rownames(population_count) <- rep(seq(2000, 2020, by=1), times = 1)
population_count$year <- rep(seq(2000, 2020, by=1), times = 1)
# national annual population counts
population_count
