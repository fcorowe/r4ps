[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Population Science",
    "section": "",
    "text": "This is the website for “Population Science”. This is a course designed and delivered by Dr. Francisco Rowe, Dr. Carmen Cabrera-Arnau and Dr. Elisabetta Pietrostefani from the Geographic Data Science Lab at the University of Liverpool, United Kingdom. You will learn applied tools and cutting-edge analytical approaches to use digital footprint data to explore and understand human population trends and patterns, including supervised and unsupervised machine learning approaches, network analysis and causal inference methods.\nThe website is free to use and is licensed under the Attribution-NonCommercial-NoDerivatives 4.0 International. A compilation of this web course is hosted as a GitHub repository that you can access:"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1 + 1\n\n[1] 2\n\n\n\n\n\n\nTao, Sui, Jonathan Corcoran, Francisco Rowe, and Mark Hickman. 2018. “To Travel or Not to Travel: ‘Weather’ Is the Question. Modelling the Effect of Local Weather Conditions on Bus Ridership.” Transportation Research Part C: Emerging Technologies 86 (January): 147–67. https://doi.org/10.1016/j.trc.2017.11.005."
  },
  {
    "objectID": "privacy.html",
    "href": "privacy.html",
    "title": "2  Data Privacy, Ethics and Biases",
    "section": "",
    "text": "Francisco to write\n\nRowe (2021)\nGreen, Pollock, and Rowe (2021)\nArribas-Bel et al. (2021)\n\n\n\n\n\nArribas-Bel, Dani, Mark Green, Francisco Rowe, and Alex Singleton. 2021. “Open Data Products-A Framework for Creating Valuable Analysis Ready Data.” Journal of Geographical Systems 23 (4): 497–514. https://doi.org/10.1007/s10109-021-00363-5.\n\n\nGreen, Mark, Frances Darlington Pollock, and Francisco Rowe. 2021. “New Forms of Data and New Forms of Opportunities to Monitor and Tackle a Pandemic.” In, 423–29. Springer International Publishing. https://doi.org/10.1007/978-3-030-70179-6_56.\n\n\nRowe, Francisco. 2021. “Big Data and Human Geography.” http://dx.doi.org/10.31235/osf.io/phz3e."
  },
  {
    "objectID": "geodemographics.html",
    "href": "geodemographics.html",
    "title": "3  Geodemographics",
    "section": "",
    "text": "Carmen to write. Helllo trying."
  },
  {
    "objectID": "sequence-analysis.html",
    "href": "sequence-analysis.html",
    "title": "4  Sequence Analysis",
    "section": "",
    "text": "Francisco to write\nThis chapter shows the use of sequence analysis to study population decline and draw on the following papers:\n\nRowe, Neville, and González-Leonardo (2022)\nNewsham and Rowe (2022)\nRowe, Robinson, and Patias (2022)\n\n\n\n\n\nNewsham, Niall, and Francisco Rowe. 2022. “Understanding the Trajectories of Population Decline Across Rural and Urban Europe: A Sequence Analysis.” https://doi.org/10.48550/ARXIV.2203.09798.\n\n\nRowe, Francisco, Ruth Neville, and Miguel González-Leonardo. 2022. “Sensing Population Displacement from Ukraine Using Facebook Data: Potential Impacts and Settlement Areas.” http://dx.doi.org/10.31219/osf.io/7n6wm.\n\n\nRowe, Francisco, Caitlin Robinson, and Nikos Patias. 2022. “Sensing Global Changes in Local Patterns of Energy Consumption in Cities During the Early Stages of the COVID-19 Pandemic.” Cities 129 (October): 103808. https://doi.org/10.1016/j.cities.2022.103808."
  },
  {
    "objectID": "network.html",
    "href": "network.html",
    "title": "5  Network Analysis",
    "section": "",
    "text": "Carmen to write something"
  },
  {
    "objectID": "sentiment-analysis.html",
    "href": "sentiment-analysis.html",
    "title": "6  Sentiment Analysis",
    "section": "",
    "text": "Francisco to write\nChapter 6\nThis chapter will draw on:\n\nRowe (2021)\nRowe et al. (2021)\n\n\n\n\n\nRowe, Francisco. 2021. “Using Twitter Data to Monitor Immigration Sentiment.” http://dx.doi.org/10.31219/osf.io/sf7u4.\n\n\nRowe, Francisco, Michael Mahony, Eduardo Graells-Garrido, Marzia Rango, and Niklas Sievers. 2021. “Using Twitter to Track Immigration Sentiment During Early Stages of the COVID-19 Pandemic.” Data & Policy 3. https://doi.org/10.1017/dap.2021.38."
  },
  {
    "objectID": "topic-modelling.html",
    "href": "topic-modelling.html",
    "title": "7  Topic Modelling",
    "section": "",
    "text": "Elisabetta to write\nChapter 7"
  },
  {
    "objectID": "longitudinal-1.html",
    "href": "longitudinal-1.html",
    "title": "8  Modelling Time",
    "section": "",
    "text": "Elisabetta to write\nTao et al. (2018)\n\n\n\n\nTao, Sui, Jonathan Corcoran, Francisco Rowe, and Mark Hickman. 2018. “To Travel or Not to Travel: ‘Weather’ Is the Question. Modelling the Effect of Local Weather Conditions on Bus Ridership.” Transportation Research Part C: Emerging Technologies 86 (January): 147–67. https://doi.org/10.1016/j.trc.2017.11.005."
  },
  {
    "objectID": "longitudinal-2.html",
    "href": "longitudinal-2.html",
    "title": "9  Assessing Interventions",
    "section": "",
    "text": "Elisabetta to write"
  },
  {
    "objectID": "machine-learning.html",
    "href": "machine-learning.html",
    "title": "10  Machine Learning",
    "section": "",
    "text": "Carmen to write\nChapter 10"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Arribas-Bel, Dani, Mark Green, Francisco Rowe, and Alex Singleton. 2021.\n“Open Data Products-A Framework for Creating Valuable Analysis\nReady Data.” Journal of Geographical Systems 23 (4):\n497–514. https://doi.org/10.1007/s10109-021-00363-5.\n\n\nGreen, Mark, Frances Darlington Pollock, and Francisco Rowe. 2021.\n“New Forms of Data and New Forms of Opportunities to Monitor and\nTackle a Pandemic.” In, 423–29. Springer International\nPublishing. https://doi.org/10.1007/978-3-030-70179-6_56.\n\n\nNewsham, Niall, and Francisco Rowe. 2022. “Understanding the\nTrajectories of Population Decline Across Rural and Urban Europe: A\nSequence Analysis.” https://doi.org/10.48550/ARXIV.2203.09798.\n\n\nRowe, Francisco. 2021a. “Using Twitter Data to Monitor Immigration\nSentiment.” http://dx.doi.org/10.31219/osf.io/sf7u4.\n\n\n———. 2021b. “Big Data and Human Geography.” http://dx.doi.org/10.31235/osf.io/phz3e.\n\n\nRowe, Francisco, Michael Mahony, Eduardo Graells-Garrido, Marzia Rango,\nand Niklas Sievers. 2021. “Using Twitter to Track Immigration\nSentiment During Early Stages of the COVID-19 Pandemic.” Data\n& Policy 3. https://doi.org/10.1017/dap.2021.38.\n\n\nRowe, Francisco, Ruth Neville, and Miguel González-Leonardo. 2022.\n“Sensing Population Displacement from Ukraine Using Facebook Data:\nPotential Impacts and Settlement Areas.” http://dx.doi.org/10.31219/osf.io/7n6wm.\n\n\nRowe, Francisco, Caitlin Robinson, and Nikos Patias. 2022.\n“Sensing Global Changes in Local Patterns of Energy Consumption in\nCities During the Early Stages of the COVID-19 Pandemic.”\nCities 129 (October): 103808. https://doi.org/10.1016/j.cities.2022.103808.\n\n\nTao, Sui, Jonathan Corcoran, Francisco Rowe, and Mark Hickman. 2018.\n“To Travel or Not to Travel: ‘Weather’\nIs the Question. Modelling the Effect of Local Weather Conditions on Bus\nRidership.” Transportation Research Part C: Emerging\nTechnologies 86 (January): 147–67. https://doi.org/10.1016/j.trc.2017.11.005."
  },
  {
    "objectID": "index.html#contact",
    "href": "index.html#contact",
    "title": "Population Science",
    "section": "Contact",
    "text": "Contact\n\nFrancisco Rowe - f.rowe-gonzalez [at] liverpool.ac.uk Senior Lecturer in Quantitative Human Geography Office 507, Roxby Building, University of Liverpool - 74 Bedford St S, Liverpool, L69 7ZT, United Kingdom.\n\n\nCarmen Cabrera-Arnau - c.cabrera-arnau [at] liverpool.ac.uk Lecturer in Geographic Data Science Office 1/016, Roxby Building, University of Liverpool - 74 Bedford St S, Liverpool, L69 7ZT, United Kingdom.\n\n\nElisabetta Pietrostefani - e.pietrostefani [at] liverpool.ac.uk Lecturer in Geographic Data Science Office 6xx, Roxby Building, University of Liverpool - 74 Bedford St S, Liverpool, L69 7ZT, United Kingdom."
  },
  {
    "objectID": "intro.html#aims",
    "href": "intro.html#aims",
    "title": "1  Overview",
    "section": "1.1 Aims",
    "text": "1.1 Aims\nThis module aims to:\n\nprovide an introduction to fundamental theories of population science;\nintroduce students to novel data and approaches to understanding population dynamics and societal change; and,\nequip students with skills and experience to conduct population science using computational, data science approaches."
  },
  {
    "objectID": "intro.html#learning-outcomes",
    "href": "intro.html#learning-outcomes",
    "title": "1  Overview",
    "section": "1.2 Learning Outcomes",
    "text": "1.2 Learning Outcomes\nBy the end of the module, students should be able to:\n\ngain an appreciation of relevant demographic theory to help interpret patterns of popu- lation change;\ndevelop an understanding of the types of demographic and social science methods that are essential for interpreting and analysing digital footprint data in the context of population dynamics;\ndevelop the ability to apply different methods to understand population dynamics and societal change;\ngain an appreciation of how population science approaches can produce relevant evidence to inform policy debates;\ndevelop critical awareness of modern demographic analysis and ethical considerations in the use of digital footprint data."
  },
  {
    "objectID": "intro.html#feedback",
    "href": "intro.html#feedback",
    "title": "1  Overview",
    "section": "1.3 Feedback",
    "text": "1.3 Feedback\nFormal assessment of two computational essays. Written assignment-specific feedback will be provided within three working weeks of the submission deadline. Comments will offer an understanding of the mark awarded and identify areas which can be considered for improvement in future assignments.\nVerbal face-to-face feedback. Immediate face-to-face feedback will be provided during computer, discussion and clinic sessions in interaction with staff. This will take place in all live sessions during the semester.\nOnline forum. Asynchronous written feedback will be provided via an online forum. Students are encouraged to contribute by asking and answering questions relating to the module content. Staff will monitor the forum Monday to Friday 9am-5pm, but it will be open to students to make contributions at all times. Response time will vary depending on the complexity of the question and staff availability."
  },
  {
    "objectID": "intro.html#computational-environment",
    "href": "intro.html#computational-environment",
    "title": "1  Overview",
    "section": "1.4 Computational Environment",
    "text": "1.4 Computational Environment\nTo reproduce the code in the book, you need the following software packages:\n\nR-4.2.2\nRStudio 2022.12.0-353\nQuarto 1.2.280\nthe list of libraries in the next section\n\nTo check your version of:\n\nR and libraries run sessionInfo()\nRStudio click help on the menu bar and then About\nQuarto check the version file in the quarto folder on your computer.\n\nTo install and update:\n\nR, download the appropriate version from The Comprehensive R Archive Network (CRAN)\nRStudio, download the appropriate version from Posit\nQuarto, download the appropriate version from the Quarto website\n\n\n1.4.1 List of libraries\nThe list of libraries used in this book is provided below:\n\ntidyverse\nviridis\nviridisLite\nggthemes\npatchwork\nshowtext\nRColorBrewer\nlubridate\ntmap\nsjPlot\nsf\nsp\nkableExtra\n\nYou need to ensure you have installed the list of libraries used in this book, running the following code:\n\nlist.of.packages.cran <- c( “tidyverse”, “viridis”, “viridisLite”, “ggthemes”, “patchwork”, “showtext”, “RColorBrewer”, “lubridate”, “tmap”, “sjPlot”, “sf”, “sp”, “kableExtra”)\n\n\nnew.packages.cran <- list.of.packages.cran[!(list.of.packages.cran %in% installed.packages()[,“Package”])] if(length(new.packages.cran)) install.packages(new.packages.cran)\n\n\nfor(i in 1:length(list.of.packages.cran)) { library(list.of.packages.cran[i], character.only = T) }"
  },
  {
    "objectID": "intro.html#assessment",
    "href": "intro.html#assessment",
    "title": "1  Overview",
    "section": "1.5 Assessment",
    "text": "1.5 Assessment\nThe final module mark is composed of the two computational essays. Together they are designed to cover the materials introduced in the entirety of content covered during the semester. A computational essay is an essay whose narrative is supported by code and computational results that are included in the essay itself. Each teaching week, you will be required to address a set of questions relating to the module content covered in that week, and to use the material that you will produce for this purpose to build your computational essay.\nAssignment 1 (50%) refer to the set of questions at the end of Chapter 2, Chapter 3, Chapter 4 and Chapter 5. You are required to use your responses to build your computational essay. Each chapter provides more specific guidance of the tasks and discussion that you are required to consider in your assignment.\nAssignment 2 (50%) refer to the set of questions at the end of Chapter 6, Chapter 7, Chapter 8, Chapter 9 and Chapter 10. You are required to use your responses to build your computational essay. Each chapter provides more specific guidance of the tasks and discussion that you are required to consider in your assignment.\n\n1.5.1 Format Requirements\nBoth assignments will have the same requirements:\n\nMaximum word count: 2,000 words, excluding figures and references.\nUp to three maps, plot or figures (a figure may include more than one map and/or plot and will only count as one but needs to be integrated in the figure)\nUp to two tables.\n\nAssignments need to be prepared in “Quarto Document” format (i.e. qmd extension) and then converted into a self-contained HTML file that will then be submitted via Turnitin. The document should only display content that will be assessed. Intermediate steps do not need to be displayed. Messages resulting from loading packages, attaching data frames, or similar messages do not need to be included as output code. Useful resources to customise your R notebook can be found on Quarto’s website.\nTwo Quarto Document templates will be available via the module Canvas site.\nSubmission is electronic only via Turnitin on Canvas.\n\n1.5.1.1 Marking criteria\nThe Standard Environmental Sciences School marking criteria apply, with a stronger emphasis on evidencing the use of regression models, critical analysis of results and presentation standards. In addition to these general criteria, the code and outputs (i.e. tables, maps and plots) contained within the notebook submitted for assessment will be assessed according to the extent of documentation and evidence of expertise in changing and extending the code options illustrated in each chapter. Specifically, the following criteria will be applied:\n\n0-15: no documentation and use of default options.\n16-39: little documentation and use of default options.\n40-49: some documentation, and use of default options.\n50-59: extensive documentation, and edit of some of the options provided in the notebook (e.g. change north arrow location).\n60-69: extensive well organised and easy to read documentation, and evidence of understanding of options provided in the code (e.g. tweaking existing options).\n70-79: all above, plus clear evidence of code design skills (e.g. customising graphics, combining plots (or tables) into a single output, adding clear axis labels and variable names on graphic outputs, etc.).\n80-100: all as above, plus code containing novel contributions that extend/improve the functionality the code was provided with (e.g. comparative model assessments, novel methods to perform the task, etc.).\n\n\n\n\n\nRowe, Francisco. 2021. “Big Data and Human Geography.” http://dx.doi.org/10.31235/osf.io/phz3e."
  },
  {
    "objectID": "network.html#dependencies",
    "href": "network.html#dependencies",
    "title": "5  Network Analysis",
    "section": "5.1 Dependencies",
    "text": "5.1 Dependencies\nIn this session we need some basic R packages before importing the data.\n\nlibrary(magrittr)\nlibrary(dplyr)\n\n# An R package for network manipulation and analysis\nlibrary(igraph)\n\n\ngetwd() #Obtain the working directory, where we will save the data folder\n\n[1] \"/Users/franciscorowe/Dropbox/Francisco/uol/teaching/envs418/202223/r4ps\""
  },
  {
    "objectID": "network.html#data",
    "href": "network.html#data",
    "title": "5  Network Analysis",
    "section": "5.2 Data",
    "text": "5.2 Data\n\n5.2.1 The US Census dataset\nDescribe here the dataset used for this session. It has been cleaned beforehand by myself.\nEach row corresponds to a origin-destination pair, the number or rows gives the total number of reported migratory movements.\n\n\n5.2.2 Import the data\nBefore we start any analysis with the data, ensure to set the path to the directory where we are working. Please replace in the following line the path to the folder where you have placed the data file.\n\ndf <- read.csv(\"./data/metro_to_metro_2015_2019_US_migration.csv\")\ndf$MSA_Current_Code <- as.character(df$MSA_Current_Code) #Ensure the MSA code is imported as a character and not as a number\nhead(df) #Examine the first few rows of the dataset\n\n  MSA_Current_Code MSA_Current_Name MSA_Current_State\n1            10180          Abilene                TX\n2            10180          Abilene                TX\n3            10180          Abilene                TX\n4            10180          Abilene                TX\n5            10180          Abilene                TX\n6            10180          Abilene                TX\n  MSA_Current_Population_1_Year_and_Over_Estimate\n1                                         168,306\n2                                         168,306\n3                                         168,306\n4                                         168,306\n5                                         168,306\n6                                         168,306\n  MSA_Current_Population_1_Year_and_Over_MOE MSA_Previous_Code\n1                                        300             10740\n2                                        300             11100\n3                                        300             12060\n4                                        300             12220\n5                                        300             12420\n6                                        300             12580\n                 MSA_Previous_Name MSA_Previous_State\n1                      Albuquerque                 NM\n2                         Amarillo                 TX\n3 Atlanta-Sandy Springs-Alpharetta                 GA\n4                   Auburn-Opelika                 AL\n5     Austin-Round Rock-Georgetown                 TX\n6        Baltimore-Columbia-Towson                 MD\n  MSA_Previous_Population_1_Year_and_Over_Estimate\n1                                          902,213\n2                                          262,574\n3                                        5,753,503\n4                                          153,728\n5                                        2,045,336\n6                                        2,766,530\n  MSA_Previous_Population_1_Year_and_Over_MOE\n1                                       2,916\n2                                       1,866\n3                                       9,607\n4                                       1,654\n5                                       5,648\n6                                       6,154\n  Movers_Metro_to_Metro_Flow_Estimate Movers_Metro_to_Metro_Flow_MOE\n1                                  41                             47\n2                                 244                             98\n3                                 118                             95\n4                                  30                             40\n5                                 289                             85\n6                                   8                             15\n\n\nWe can obtain the total number of reported migratory movements with the following command:\n\nnrow(df)\n\n[1] 52930"
  },
  {
    "objectID": "network.html#creating-networks",
    "href": "network.html#creating-networks",
    "title": "5  Network Analysis",
    "section": "5.3 Creating networks",
    "text": "5.3 Creating networks\nBefore we start to analyse the data introduced in section 5.2., let us first take a step back to consider the main object of study of this Chapter: the so-called networks. In the most general sense, a network (also known as a graph) is a structure formed by a set of objects which may have some connections between them. The objects are represented by nodes (a.k.a. vertices) and the connections between these objects are represented by edges (a.k.a. links). Networks are used as a tool to conceptualise many real-life contexts, such as the friendships between the members of a year group at school, the direct airline connections between cities in a continent or the presence of hyperlinks between a set of websites. In this session, we will use networks to model the migratory flows between US cities.\n\n5.3.1 Starting from the basics\nIn order to create, manipulate and analyse networks in R, we will use the igraph package, which we imported in section 5.1. We start by creating a very simple network with the code below. The network contains five nodes and five edges and it is undirected, so the edges do not have orientations. The nodes and edges could represent, respectively, a set of cities and the presence of migration flows between these cities in two consecutive years.\n\ng1 <- graph( edges=c(1,2, 1,4, 2,3, 2,4, 4,5), n=5, directed=F ) # Creates an undirected network with 5 nodes and 5 edges\n# The number of nodes is given by argument n\n# In this case, the node labels or IDs are represented by numbers 1 to 5\n# The edges are specified as a list of pairs of nodes\nplot(g1) # A simple plot of the network allows us to visualise it\n\n\n\n\nIf the connections between the nodes of a network are non-reciprocal, the network is called directed. For example, this could correspond to a situation where there are people moving from city 1 to city 2, but nobody moving from city 2 to city 1. Note that in the code below we have not only added directions to the edges, but we have also added a few additional parameters to the plot function in order to customise the diagram.\n\ng2 <- graph( edges=c(1,2, 1,4, 2,3, 4,1, 4,2, 4,5), n=7, directed=T ) # Creates a directed network with 7 nodes and 6 edges \n#note that we now have edge 1,4 and edge 4,1 and that 2 of the nodes are isolated\nplot(g2, vertex.frame.color=\"red\",  vertex.label.color=\"black\",\nvertex.label.cex=0.9, vertex.label.dist=2.3, edge.curved=0.3, edge.arrow.size=.5, edge.color = \"blue\", vertex.color=\"yellow\", vertex.size=15) # A simple plot of the network with a few extra features\n\n\n\n\nThe network can also be defined as a list containing pairs of named nodes. Then, it is not necessary to specify the number of nodes but the isolated nodes have to be included. The following code generates a network which is equivalent to the one above.\n\ng3 <- graph( c(\"City 1\",\"City 2\", \"City 2\",\"City 3\", \"City 1\",\"City 4\",  \"City 4\",\"City 1\",  \"City 4\",\"City 2\", \"City 4\",\"City 5\"), isolates=c(\"City 6\", \"City 7\") ) \nplot(g3, vertex.frame.color=\"red\",  vertex.label.color=\"black\",\nvertex.label.cex=0.9, vertex.label.dist=2.3, edge.curved=0.3, edge.arrow.size=.5, edge.color = \"blue\", vertex.color=\"yellow\", vertex.size=15) \n\n\n\n\n\n\n5.3.2 Adding attributes\nIn R, we can add attributes to the nodes, edges and the network. To add attributes to the nodes, we first need to access them via the following command:\n\nV(g3)\n\n+ 7/7 vertices, named, from 37b10cf:\n[1] City 1 City 2 City 3 City 4 City 5 City 6 City 7\n\n\nThe node attribute name is automatically generated from the node labels that we manually assigned before.\n\nV(g3)$name\n\n[1] \"City 1\" \"City 2\" \"City 3\" \"City 4\" \"City 5\" \"City 6\" \"City 7\"\n\n\nBut other node attributes could be added. For example, the current population of the cities represented by the nodes:\n\nV(g3)$population <- c(134000, 92000, 549000, 1786000, 74000, 8000, 21000)\n\nSimilarly, we can access the edges:\n\nE(g3)\n\n+ 6/6 edges from 37b10cf (vertex names):\n[1] City 1->City 2 City 2->City 3 City 1->City 4 City 4->City 1 City 4->City 2\n[6] City 4->City 5\n\n\nand add edge attributes, such as the number of people moving from an origin to a destination city in two consecutive years. We call this attribute the weight of the edge, since if there is a lot of people going from one city to another, the connection between these cities has more importance or “weight” in the network.\n\n{E(g3)$weight <- c(2000, 3000, 5000, 1000, 1000, 4000)}\n\nWe can examine the adjacency matrix of the network, which represents the presence of edges between different pairs of nodes. In this case, each row corresponds to an origin city and each column to a destination:\n\ng3[] #The adjacency matrix of network g3\n\n7 x 7 sparse Matrix of class \"dgCMatrix\"\n       City 1 City 2 City 3 City 4 City 5 City 6 City 7\nCity 1      .   2000      .   5000      .      .      .\nCity 2      .      .   3000      .      .      .      .\nCity 3      .      .      .      .      .      .      .\nCity 4   1000   1000      .      .   4000      .      .\nCity 5      .      .      .      .      .      .      .\nCity 6      .      .      .      .      .      .      .\nCity 7      .      .      .      .      .      .      .\n\n\nWe can also look at the existing node and edge attributes.\n\nvertex_attr(g3) #Node attributes of g3. Use edge_attr() to access the edge attributes\n\n$name\n[1] \"City 1\" \"City 2\" \"City 3\" \"City 4\" \"City 5\" \"City 6\" \"City 7\"\n\n$population\n[1]  134000   92000  549000 1786000   74000    8000   21000\n\n\nFinally, it is possible to add network attributes\n\ng3$title <- \"Network of migration between cities\""
  },
  {
    "objectID": "network.html#reading-networks-from-data-files",
    "href": "network.html#reading-networks-from-data-files",
    "title": "5  Network Analysis",
    "section": "5.4 Reading networks from data files",
    "text": "5.4 Reading networks from data files\n\n5.4.1 Preparing the data\nAt the beginning of the chapter, we defined a data frame called df based on some imported data from the US Census about migratory movements between different US cities, or more precisely, between US Metropolitan Statistical Areas. This is a large data frame containing 52,930 rows, but how can we turn this data frame into a network similar to the ones that we generated in section 5.3.? The igraph function graph_from_data_frame() can do this for us. To find out more about this function, we can run the following command:\n\nhelp(\"graph_from_data_frame\")\n\nAs we can see, the input data for graph_from_data_frame() needs to be in a certain format which is different from our migration data frame. In particular, the function requires three arguments: 1) d, which is a data frame containing an edge list in the first two columns and any additional columns are considered as edge attributes; 2) vertices, which is either NULL or a data frame with vertex metadata (i.e. vertex attributes); and 3) directed, which is a boolean argument indicating whether the network is directed or not. Our next task is therefore to obtain 1) and 2) from the migration data frame called df.\nLet us start with argument 1). Each row in df will correspond to an edge in the migration network since it contains information about a pair of origin and destination cities for two consecutive years. The names of the origin and destination cities are given by the columns in df called MSA_Previous_Name and MSA_Current_Name. In addition, the column called Movers_Metro_to_Metro_Flow_Estimate gives the number of people moving between the origin and the destination cities, so this will be the weight attribute of each edge in the migration network. Hence, we can define a data frame of edges which we will call df_edges that conforms with the format required by the argument 1) as follows:\n\n#The pipe operator used below and denoted by %>% is a feature of the magrittr package, it takes the output of one function and passes it into another function as an argument\n\ndf_edges <- data.frame(df$MSA_Previous_Name, df$MSA_Current_Name, df$Movers_Metro_to_Metro_Flow_Estimate) %>%\n  rename(origin = df.MSA_Previous_Name, destination = df.MSA_Current_Name, weight = df.Movers_Metro_to_Metro_Flow_Estimate) # Creates the df_edges data frame with data from df and renames the columns as \"origin\", \"destination\" and \"weight\"\n\ndf_edges$weight <- as.numeric(gsub(\",\",\"\",df_edges$weight)) #Ensure that the weight attribute is stored as a number and not as character \n\nFor argument 2) we can define a data frame of nodes which we will call df_nodes, where each row will correspond to a unique node or city. To obtain all the unique cities from df, we can firstly obtain a data frame of unique origin cities, then a data frame of unique destinations, and finally, apply the full_join() function to these two data frames to obtain their union, which will be df_nodes. The name of the unique cities in df_nodes is in the column called label, the other columns can be seen as the nodes metadata.\n\ndf_unique_origins <- df %>% \n  distinct(MSA_Previous_Name) %>%\n  rename(name = MSA_Previous_Name) \n\ndf_unique_destinations <- df %>%\n  distinct(MSA_Current_Name) %>%\n  rename(name = MSA_Current_Name)\n\ndf_nodes <- full_join(df_unique_origins, df_unique_destinations, by = \"name\")\n\n\ndf_nodes\n\n                                             name\n1                                     Albuquerque\n2                                        Amarillo\n3                Atlanta-Sandy Springs-Alpharetta\n4                                  Auburn-Opelika\n5                    Austin-Round Rock-Georgetown\n6                       Baltimore-Columbia-Towson\n7                            Beaumont-Port Arthur\n8                               Birmingham-Hoover\n9                                     Bloomington\n10                                     Boise City\n11                                  Bowling Green\n12                          Brownsville-Harlingen\n13                    Charleston-North Charleston\n14                     Charlotte-Concord-Gastonia\n15                                    Chattanooga\n16                                       Cheyenne\n17                       Chicago-Naperville-Elgin\n18                                    Clarksville\n19                               Cleveland-Elyria\n20                          College Station-Bryan\n21                               Colorado Springs\n22                                       Columbus\n23                                 Corpus Christi\n24             Crestview-Fort Walton Beach-Destin\n25                    Dallas-Fort Worth-Arlington\n26                         Denver-Aurora-Lakewood\n27                        Detroit-Warren-Dearborn\n28                                        El Paso\n29                                           Enid\n30                                           Erie\n31                                   Fayetteville\n32                 Fayetteville-Springdale-Rogers\n33                                      Flagstaff\n34                         Florence-Muscle Shoals\n35                                     Fort Wayne\n36                                      Goldsboro\n37                            Greenville-Anderson\n38                                    Hot Springs\n39               Houston-The Woodlands-Sugar Land\n40                                   Jacksonville\n41                                 Killeen-Temple\n42                              Kingsport-Bristol\n43                                         Kokomo\n44                                   Lake Charles\n45                                         Laredo\n46                                     Las Cruces\n47                   Las Vegas-Henderson-Paradise\n48                                         Lawton\n49           Little Rock-North Little Rock-Conway\n50                                          Logan\n51                                       Longview\n52                 Los Angeles-Long Beach-Anaheim\n53                                        Lubbock\n54                                      Manhattan\n55                       McAllen-Edinburg-Mission\n56                                        Memphis\n57            Miami-Fort Lauderdale-Pompano Beach\n58                                        Midland\n59                                         Mobile\n60                                         Monroe\n61                                     Montgomery\n62                                           Napa\n63     Nashville-Davidson--Murfreesboro--Franklin\n64                    New York-Newark-Jersey City\n65                                          Ocala\n66                                         Odessa\n67                               Ogden-Clearfield\n68                                  Oklahoma City\n69                           Omaha-Council Bluffs\n70                   Oxnard-Thousand Oaks-Ventura\n71                  Palm Bay-Melbourne-Titusville\n72                     Pensacola-Ferry Pass-Brent\n73                 Philadelphia-Camden-Wilmington\n74                          Phoenix-Mesa-Chandler\n75                                     Rapid City\n76                                        Redding\n77               Riverside-San Bernardino-Ontario\n78                    Sacramento-Roseville-Folsom\n79                                      St. Louis\n80                                          Salem\n81                                 Salt Lake City\n82                                     San Angelo\n83                      San Antonio-New Braunfels\n84                 San Diego-Chula Vista-Carlsbad\n85                 San Francisco-Oakland-Berkeley\n86                 San Jose-Sunnyvale-Santa Clara\n87                         Santa Cruz-Watsonville\n88                                       Savannah\n89                        Seattle-Tacoma-Bellevue\n90                                Sherman-Denison\n91                        Shreveport-Bossier City\n92                                    Sioux Falls\n93                                    Tallahassee\n94                Tampa-St. Petersburg-Clearwater\n95                                      Texarkana\n96                              Trenton-Princeton\n97                                          Tulsa\n98                                          Tyler\n99                                       Valdosta\n100                                       Vallejo\n101                                      Victoria\n102                                          Waco\n103               Washington-Arlington-Alexandria\n104                          Waterloo-Cedar Falls\n105                                       Wichita\n106                                 Wichita Falls\n107                                     Worcester\n108 Outside Metro Area within U.S. or Puerto Rico\n109                                        Africa\n110                                          Asia\n111                               Central America\n112                                        Europe\n113                              Northern America\n114                                 South America\n115                    Allentown-Bethlehem-Easton\n116                                       Arecibo\n117                                   Baton Rouge\n118                       Boston-Cambridge-Newton\n119             Bremerton-Silverdale-Port Orchard\n120                   Bridgeport-Stamford-Norwalk\n121                    Des Moines-West Des Moines\n122                                         Dover\n123                                         Fargo\n124                                Grand Junction\n125                                       Guayama\n126                  Indianapolis-Carmel-Anderson\n127                             Manchester-Nashua\n128                                      Mayagüez\n129                            Milwaukee-Waukesha\n130                     Orlando-Kissimmee-Sanford\n131                                         Ponce\n132                                       Reading\n133                                     Rochester\n134                                       Salinas\n135                                    San Germán\n136                      San Juan-Carolina-Caguas\n137                                        Tucson\n138                            Vineland-Bridgeton\n139                                         Yauco\n140                                     Caribbean\n141                                        Albany\n142                                Albany-Lebanon\n143                       Albany-Schenectady-Troy\n144                                       Altoona\n145                                     Anchorage\n146                       Augusta-Richmond County\n147                                       Beckley\n148                                          Bend\n149                     Blacksburg-Christiansburg\n150                                       Boulder\n151                           Buffalo-Cheektowaga\n152                     California-Lexington Park\n153                              Canton-Massillon\n154                         Cape Coral-Fort Myers\n155                       Chambersburg-Waynesboro\n156                                    Charleston\n157                                    Cincinnati\n158                                     Cleveland\n159                                      Columbia\n160                              Dayton-Kettering\n161            Deltona-Daytona Beach-Ormond Beach\n162                              East Stroudsburg\n163                                  Fort Collins\n164                         Grand Rapids-Kentwood\n165                         Greensboro-High Point\n166                        Hagerstown-Martinsburg\n167                           Harrisburg-Carlisle\n168             Hartford-East Hartford-Middletown\n169                      Hickory-Lenoir-Morganton\n170                   Hilton Head Island-Bluffton\n171                            Huntington-Ashland\n172                                       Jackson\n173                             Kalamazoo-Portage\n174                                   Kansas City\n175                                     Knoxville\n176                                     Lancaster\n177                          Lansing-East Lansing\n178                             Lexington-Fayette\n179                                          Lima\n180                   Louisville/Jefferson County\n181                                       Madison\n182                                     Mansfield\n183              Minneapolis-St. Paul-Bloomington\n184                                    Morgantown\n185        Myrtle Beach-Conway-North Myrtle Beach\n186                          New Orleans-Metairie\n187                 North Port-Sarasota-Bradenton\n188                            Norwich-New London\n189                            Parkersburg-Vienna\n190                                    Pittsburgh\n191                       Portland-South Portland\n192                  Portland-Vancouver-Hillsboro\n193                                Port St. Lucie\n194                                    Provo-Orem\n195                                  Raleigh-Cary\n196                                      Richmond\n197                                       Roanoke\n198                                          Rome\n199                                    St. George\n200                                      Santa Fe\n201                     Santa Maria-Santa Barbara\n202                          Sebastian-Vero Beach\n203                          South Bend-Mishawaka\n204                                   Springfield\n205                                 State College\n206                                      Syracuse\n207                                   Terre Haute\n208                                  The Villages\n209                                        Toledo\n210                                        Topeka\n211                                Urban Honolulu\n212                                    Utica-Rome\n213           Virginia Beach-Norfolk-Newport News\n214                          Weirton-Steubenville\n215                                      Wheeling\n216                                  Williamsport\n217                                    Winchester\n218                                 Winston-Salem\n219                    Youngstown-Warren-Boardman\n220                             U.S. Island Areas\n221                            Oceania and At Sea\n222                               Anniston-Oxford\n223                          Athens-Clarke County\n224                                     Brunswick\n225                                        Dalton\n226                                        Dothan\n227                            Eugene-Springfield\n228                                     Fairbanks\n229                                      Florence\n230                                   Gainesville\n231                                    Hinesville\n232                                   Idaho Falls\n233                         Lakeland-Winter Haven\n234                             Macon-Bibb County\n235                                        Merced\n236                                   Panama City\n237                            Providence-Warwick\n238                                   Rocky Mount\n239                                       Saginaw\n240                             Sebring-Avon Park\n241                                        Sumter\n242                                 Warner Robins\n243                                         Akron\n244                                     Asheville\n245                                   Bakersfield\n246                                    Bellingham\n247                                 Coeur d'Alene\n248                                     Corvallis\n249                                     El Centro\n250                                     Green Bay\n251                                  Harrisonburg\n252                            Kennewick-Richland\n253                      Lafayette-West Lafayette\n254                      Lake Havasu City-Kingman\n255                                       Medford\n256                                       Modesto\n257                                          Reno\n258                        Spokane-Spokane Valley\n259                                       Visalia\n260                                   Walla Walla\n261                                  York-Hanover\n262                       Atlantic City-Hammonton\n263                                        Bangor\n264                               Barnstable Town\n265                                      Billings\n266                                    Binghamton\n267                   Burlington-South Burlington\n268                                  Cedar Rapids\n269                                         Chico\n270                  Davenport-Moline-Rock Island\n271                            Durham-Chapel Hill\n272                                        Elmira\n273                                    Farmington\n274                                    Fort Smith\n275                                        Fresno\n276                                   Glens Falls\n277                             Homosassa Springs\n278                                        Ithaca\n279                                      Kankakee\n280                                      Kingston\n281                                       Lebanon\n282                               Lewiston-Auburn\n283                                     Lynchburg\n284                             New Haven-Milford\n285                                     Owensboro\n286                                    Pittsfield\n287              Poughkeepsie-Newburgh-Middletown\n288                                        Pueblo\n289                                   Punta Gorda\n290                                      Rockford\n291                                     Salisbury\n292                   San Luis Obispo-Paso Robles\n293                        Scranton--Wilkes-Barre\n294                                      Stockton\n295                           Watertown-Fort Drum\n296                                    Wilmington\n297                                     Ann Arbor\n298                                      Bay City\n299                                        Casper\n300                              Champaign-Urbana\n301                                        Duluth\n302                                       Greeley\n303                               Gulfport-Biloxi\n304                                    Huntsville\n305                                     Jonesboro\n306                       Kahului-Wailuku-Lahaina\n307                                     Lafayette\n308                                      Lawrence\n309                                        Madera\n310                                       Mankato\n311                        Michigan City-La Porte\n312                                      Missoula\n313                                    Morristown\n314                        Mount Vernon-Anacortes\n315                        Olympia-Lacey-Tumwater\n316                                        Peoria\n317                      Prescott Valley-Prescott\n318                           Santa Rosa-Petaluma\n319                          Sierra Vista-Douglas\n320                                          Yuma\n321                                  Grand Island\n322                               Houma-Thibodaux\n323                                     Pocatello\n324                             Aguadilla-Isabela\n325                                      Bismarck\n326                            Bloomsburg-Berwick\n327                                    Burlington\n328                             Carbondale-Marion\n329                               Charlottesville\n330                                    Gettysburg\n331                                   Grants Pass\n332                                     Johnstown\n333                                      Lewiston\n334                                       Lincoln\n335                           Naples-Marco Island\n336                                    Ocean City\n337                                        Racine\n338                                  Johnson City\n339                                       Abilene\n340                                      Appleton\n341                                    Evansville\n342                                   Grand Forks\n343                                   Hattiesburg\n344                                     Iowa City\n345                                     Yuba City\n346                                       Dubuque\n347                                   Great Falls\n348                                Jefferson City\n349                                        Joplin\n350                            La Crosse-Onalaska\n351                                        Muncie\n352                                     St. Cloud\n353                                    St. Joseph\n354                                    Sioux City\n355                                   Carson City\n356                                       Decatur\n357                       Elizabethtown-Fort Knox\n358                                       Gadsden\n359                                      New Bern\n360                                     Sheboygan\n361                                   Spartanburg\n362                                    Twin Falls\n363                                 Wausau-Weston\n364                                        Yakima\n365                                          Ames\n366                                  Battle Creek\n367                                Cape Girardeau\n368                                Elkhart-Goshen\n369                                         Flint\n370                                   Fond du Lac\n371                                       Hammond\n372                                      Muskegon\n373                                         Niles\n374                                Oshkosh-Neenah\n375                                    Tuscaloosa\n376                         Daphne-Fairhope-Foley\n377                                      Staunton\n378                                    Eau Claire\n379                             Janesville-Beloit\n380                                    Greenville\n381                                    Alexandria\n382                                     Wenatchee\n383                                      Danville\n384                              Hanford-Corcoran\n385                                    Cumberland\n386                                    Pine Bluff\n\n\nFinally, a directed migration network can be obtained with the following line of code:\n\nUS_migration_network <- graph_from_data_frame(d = df_edges,\n                                       vertices = df_nodes,\n                                       directed = TRUE)"
  },
  {
    "objectID": "network.html#network-visualisation",
    "href": "network.html#network-visualisation",
    "title": "5  Network Analysis",
    "section": "5.5 Network visualisation",
    "text": "5.5 Network visualisation\nOnce the data is imported, we need to build the network. The aim of this section is to visualise the network. To facilitate the visualisation, we will filter the dataset so that we only include cities from a state. In this case, Minnesota. To filter, we use the grepl() function, which stands for grep logical. Both grep() and grepl() allow us to check whether a pattern is present in a character string or vector of a character string. While the grep() function returns vector of indices of the element if a pattern exists in that vector, the grepl() function returns TRUE if the given pattern is present in the vector. Otherwise, it returns FALSE. In this case, we are filtering the dataset so that only the rows where the field MSA_Current_State is MN, which is the official abbreviation for Minnesota.\n\n# df <- df %>% filter(grepl('MN', MSA_Current_State)) %>% filter(grepl('MN', MSA_Previous_State))"
  },
  {
    "objectID": "network.html#section",
    "href": "network.html#section",
    "title": "5  Network Analysis",
    "section": "5.6 ",
    "text": "5.6 \n\n# library(network)\n# \n# routes_network <- network(edges,\n#                           vertex.attr = nodes,\n#                           matrix.type = \"edgelist\",\n#                           ignore.eval = FALSE)\n# \n# plot(routes_network, vertex.cex = 2.5)\n# \n# detach(package:network)\n\n\n# rm(routes_network)\n# library(igraph)\n# \n# routes_igraph <- graph_from_data_frame(d = edges,\n#                                        vertices = nodes,\n#                                        directed = TRUE)\n# \n# plot(routes_igraph,\n#      layout = layout_with_graphopt,\n#      vertex.size = 3,\n#      vertex.label.cex = 0.7,\n#      edge.arrow.size = 0.01)\n\n\n# library(tidygraph)\n# library(ggraph)\n# \n# routes_tidy <- tbl_graph(nodes = nodes,\n#                          edges = edges,\n#                          directed = TRUE)\n# \n# routes_igraph_tidy <- as_tbl_graph(routes_igraph)\n# \n# \n# ggraph(routes_tidy, layout = \"graphopt\") + \n#   geom_node_point() +\n#   geom_edge_link(aes(width = weight), alpha = 0.7) +\n#   scale_edge_width(range = c(0.01, 3)) +\n#   geom_node_text(aes(label = label), repel = TRUE, cex=2.5, color='red') +\n#   labs(edge_width = \"Flow\") +\n#   theme_graph()\n# ```\n# \n# ```{r}\n# \n# library(circlize)\n# \n# chordDiagram(edges, annotationTrack = \"grid\", preAllocateTracks = list(track.height = 0.01))\n#   circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {\n#   xlim = get.cell.meta.data(\"xlim\")\n#   xplot = get.cell.meta.data(\"xplot\")\n#   ylim = get.cell.meta.data(\"ylim\")\n#   sector.name = get.cell.meta.data(\"sector.index\")\n#   if(abs(xplot[2] - xplot[1]) < 1000) {\n#     circos.text(mean(xlim), ylim[1], sector.name, facing = \"clockwise\",\n#                 niceFacing = TRUE, adj = c(0, 0.05), cex=0.5)\n#   } else {\n#     circos.text(mean(xlim), ylim[1], sector.name, facing = \"clockwise\",\n#                 niceFacing = TRUE, adj = c(0, 0.05), cex=0.5)\n#   }\n# }, bg.border = NA)\n\n\n# library(reshape2)\n# m1 <- acast(edges, origin ~ destination, value.var = 'weight')\n# m1[is.na(m1)] <- 0\n# \n# rownames(m1) <- paste0(\"Origin \", 1:nrow(nodes))\n# colnames(m1) <- paste0(\"Destination \", 1:nrow(nodes))\n# \n# chordDiagram(m1, annotationTrack = \"grid\", annotationTrackHeight = c(0.04, 0.2))\n# \n# # Restart circular layout parameters\n# circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {\n#   xlim = get.cell.meta.data(\"xlim\")\n#   xplot = get.cell.meta.data(\"xplot\")\n#   ylim = get.cell.meta.data(\"ylim\")\n#   sector.name = get.cell.meta.data(\"sector.index\")\n#   if(abs(xplot[2] - xplot[1]) < 1000) {\n#     circos.text(mean(xlim), ylim[1], sector.name, facing = \"clockwise\",\n#                 niceFacing = TRUE, adj = c(-0.2, 0), cex=0.7)\n#   } else {\n#     circos.text(mean(xlim), ylim[1], sector.name, facing = \"inside\",\n#                 niceFacing = TRUE, adj = c(0, -0.2), cex=0.7)\n#   }\n# }, bg.border = NA)\n\nIf you want to play around and make a nicer diagram, check this link."
  },
  {
    "objectID": "network.html#network-metrics",
    "href": "network.html#network-metrics",
    "title": "5  Network Analysis",
    "section": "5.7 Network metrics",
    "text": "5.7 Network metrics\nNow that we have visualised a small migration network, let us define some of the network"
  },
  {
    "objectID": "network.html#distances-and-paths",
    "href": "network.html#distances-and-paths",
    "title": "5  Network Analysis",
    "section": "5.8 Distances and paths",
    "text": "5.8 Distances and paths"
  },
  {
    "objectID": "network.html#subgroups-and-communities",
    "href": "network.html#subgroups-and-communities",
    "title": "5  Network Analysis",
    "section": "5.9 Subgroups and communities",
    "text": "5.9 Subgroups and communities"
  },
  {
    "objectID": "network.html#sec-sec_dependencies",
    "href": "network.html#sec-sec_dependencies",
    "title": "5  Network Analysis",
    "section": "5.1 Dependencies",
    "text": "5.1 Dependencies\nIn this session we need some basic R packages before importing the data.\n\nlibrary(magrittr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n# An R package for network manipulation and analysis\nlibrary(igraph)\n\n\nAttaching package: 'igraph'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    as_data_frame, groups, union\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\n\n\ngetwd() #Obtain the working directory, where we will save the data folder\n\n[1] \"/Users/carmen/Library/CloudStorage/OneDrive-TheUniversityofLiverpool/GitHub/r4ps\""
  },
  {
    "objectID": "network.html#sec-sec_data",
    "href": "network.html#sec-sec_data",
    "title": "5  Network Analysis",
    "section": "5.2 Data",
    "text": "5.2 Data\n\n5.2.1 The US Census dataset\nDescribe here the dataset used for this session. It has been cleaned beforehand by myself.\nEach row corresponds to a origin-destination pair, the number or rows gives the total number of reported migratory movements.\n\n\n5.2.2 Import the data\nBefore we start any analysis with the data, ensure to set the path to the directory where we are working. Please replace in the following line the path to the folder where you have placed the data file.\n\ndf <- read.csv(\"./data/metro_to_metro_2015_2019_US_migration.csv\")\n\n#Ensure the MSA code is imported as a character and not as a number\ndf$MSA_Current_Code <- as.character(df$MSA_Current_Code) \n\n#Include an additional column with the full name of the MSA in the format: Name, State\ndf$MSA_Previous_Name_State <- paste0(df$MSA_Previous_Name, ', ', df$MSA_Previous_State)\ndf$MSA_Current_Name_State <- paste0(df$MSA_Current_Name, ', ', df$MSA_Current_State)\n\n#Examine the first few rows of the dataset\nhead(df) \n\n  MSA_Current_Code MSA_Current_Name MSA_Current_State\n1            10180          Abilene                TX\n2            10180          Abilene                TX\n3            10180          Abilene                TX\n4            10180          Abilene                TX\n5            10180          Abilene                TX\n6            10180          Abilene                TX\n  MSA_Current_Population_1_Year_and_Over_Estimate\n1                                         168,306\n2                                         168,306\n3                                         168,306\n4                                         168,306\n5                                         168,306\n6                                         168,306\n  MSA_Current_Population_1_Year_and_Over_MOE MSA_Previous_Code\n1                                        300             10740\n2                                        300             11100\n3                                        300             12060\n4                                        300             12220\n5                                        300             12420\n6                                        300             12580\n                 MSA_Previous_Name MSA_Previous_State\n1                      Albuquerque                 NM\n2                         Amarillo                 TX\n3 Atlanta-Sandy Springs-Alpharetta                 GA\n4                   Auburn-Opelika                 AL\n5     Austin-Round Rock-Georgetown                 TX\n6        Baltimore-Columbia-Towson                 MD\n  MSA_Previous_Population_1_Year_and_Over_Estimate\n1                                          902,213\n2                                          262,574\n3                                        5,753,503\n4                                          153,728\n5                                        2,045,336\n6                                        2,766,530\n  MSA_Previous_Population_1_Year_and_Over_MOE\n1                                       2,916\n2                                       1,866\n3                                       9,607\n4                                       1,654\n5                                       5,648\n6                                       6,154\n  Movers_Metro_to_Metro_Flow_Estimate Movers_Metro_to_Metro_Flow_MOE\n1                                  41                             47\n2                                 244                             98\n3                                 118                             95\n4                                  30                             40\n5                                 289                             85\n6                                   8                             15\n               MSA_Previous_Name_State MSA_Current_Name_State\n1                      Albuquerque, NM            Abilene, TX\n2                         Amarillo, TX            Abilene, TX\n3 Atlanta-Sandy Springs-Alpharetta, GA            Abilene, TX\n4                   Auburn-Opelika, AL            Abilene, TX\n5     Austin-Round Rock-Georgetown, TX            Abilene, TX\n6        Baltimore-Columbia-Towson, MD            Abilene, TX\n\n\nWe can obtain the total number of reported migratory movements with the following command:\n\nnrow(df)\n\n[1] 52930"
  },
  {
    "objectID": "network.html#sec-sec_create",
    "href": "network.html#sec-sec_create",
    "title": "5  Network Analysis",
    "section": "5.3 Creating networks",
    "text": "5.3 Creating networks\nBefore we start to analyse the data introduced in Section 5.2, let us first take a step back to consider the main object of study of this Chapter: the so-called networks. In the most general sense, a network (also known as a graph) is a structure formed by a set of objects which may have some connections between them. The objects are represented by nodes (a.k.a. vertices) and the connections between these objects are represented by edges (a.k.a. links). Networks are used as a tool to conceptualise many real-life contexts, such as the friendships between the members of a year group at school, the direct airline connections between cities in a continent or the presence of hyperlinks between a set of websites. In this session, we will use networks to model the migratory flows between US cities.\n\n5.3.1 Starting from the basics\nIn order to create, manipulate and analyse networks in R, we will use the igraph package, which we imported in Section 5.2. We start by creating a very simple network with the code below. The network contains five nodes and five edges and it is undirected, so the edges do not have orientations. The nodes and edges could represent, respectively, a set of cities and the presence of migration flows between these cities in two consecutive years.\n\ng1 <- graph( edges=c(1,2, 1,4, 2,3, 2,4, 4,5), n=5, directed=F ) # Creates an undirected network with 5 nodes and 5 edges\n# The number of nodes is given by argument n\n# In this case, the node labels or IDs are represented by numbers 1 to 5\n# The edges are specified as a list of pairs of nodes\nplot(g1) # A simple plot of the network allows us to visualise it\n\n\n\n\nIf the connections between the nodes of a network are non-reciprocal, the network is called directed. For example, this could correspond to a situation where there are people moving from city 1 to city 2, but nobody moving from city 2 to city 1. Note that in the code below we have not only added directions to the edges, but we have also added a few additional parameters to the plot function in order to customise the diagram.\n\ng2 <- graph( edges=c(1,2, 1,4, 2,3, 4,1, 4,2, 4,5), n=7, directed=T ) # Creates a directed network with 7 nodes and 6 edges \n#note that we now have edge 1,4 and edge 4,1 and that 2 of the nodes are isolated\nplot(g2, vertex.frame.color=\"red\",  vertex.label.color=\"black\",\nvertex.label.cex=0.9, vertex.label.dist=2.3, edge.curved=0.3, edge.arrow.size=.5, edge.color = \"blue\", vertex.color=\"yellow\", vertex.size=15) # A simple plot of the network with a few extra features\n\n\n\n\nThe network can also be defined as a list containing pairs of named nodes. Then, it is not necessary to specify the number of nodes but the isolated nodes have to be included. The following code generates a network which is equivalent to the one above.\n\ng3 <- graph( c(\"City 1\",\"City 2\", \"City 2\",\"City 3\", \"City 1\",\"City 4\",  \"City 4\",\"City 1\",  \"City 4\",\"City 2\", \"City 4\",\"City 5\"), isolates=c(\"City 6\", \"City 7\") ) \nplot(g3, vertex.frame.color=\"red\",  vertex.label.color=\"black\",\nvertex.label.cex=0.9, vertex.label.dist=2.3, edge.curved=0.3, edge.arrow.size=.5, edge.color = \"blue\", vertex.color=\"yellow\", vertex.size=15) \n\n\n\n\n\n\n5.3.2 Adding attributes\nIn R, we can add attributes to the nodes, edges and the network. To add attributes to the nodes, we first need to access them via the following command:\n\nV(g3)\n\n+ 7/7 vertices, named, from d1c171f:\n[1] City 1 City 2 City 3 City 4 City 5 City 6 City 7\n\n\nThe node attribute name is automatically generated from the node labels that we manually assigned before.\n\nV(g3)$name\n\n[1] \"City 1\" \"City 2\" \"City 3\" \"City 4\" \"City 5\" \"City 6\" \"City 7\"\n\n\nBut other node attributes could be added. For example, the current population of the cities represented by the nodes:\n\nV(g3)$population <- c(134000, 92000, 549000, 1786000, 74000, 8000, 21000)\n\nSimilarly, we can access the edges:\n\nE(g3)\n\n+ 6/6 edges from d1c171f (vertex names):\n[1] City 1->City 2 City 2->City 3 City 1->City 4 City 4->City 1 City 4->City 2\n[6] City 4->City 5\n\n\nand add edge attributes, such as the number of people moving from an origin to a destination city in two consecutive years. We call this attribute the weight of the edge, since if there is a lot of people going from one city to another, the connection between these cities has more importance or “weight” in the network.\n\n{E(g3)$weight <- c(2000, 3000, 5000, 1000, 1000, 4000)}\n\nWe can examine the adjacency matrix of the network, which represents the presence of edges between different pairs of nodes. In this case, each row corresponds to an origin city and each column to a destination:\n\ng3[] #The adjacency matrix of network g3\n\n7 x 7 sparse Matrix of class \"dgCMatrix\"\n       City 1 City 2 City 3 City 4 City 5 City 6 City 7\nCity 1      .   2000      .   5000      .      .      .\nCity 2      .      .   3000      .      .      .      .\nCity 3      .      .      .      .      .      .      .\nCity 4   1000   1000      .      .   4000      .      .\nCity 5      .      .      .      .      .      .      .\nCity 6      .      .      .      .      .      .      .\nCity 7      .      .      .      .      .      .      .\n\n\nWe can also look at the existing node and edge attributes.\n\nvertex_attr(g3) #Node attributes of g3. Use edge_attr() to access the edge attributes\n\n$name\n[1] \"City 1\" \"City 2\" \"City 3\" \"City 4\" \"City 5\" \"City 6\" \"City 7\"\n\n$population\n[1]  134000   92000  549000 1786000   74000    8000   21000\n\n\nFinally, it is possible to add network attributes\n\ng3$title <- \"Network of migration between cities\""
  },
  {
    "objectID": "network.html#sec-sec_reading",
    "href": "network.html#sec-sec_reading",
    "title": "5  Network Analysis",
    "section": "5.4 Reading networks from data files",
    "text": "5.4 Reading networks from data files\n\n5.4.1 Preparing the data to create an igraph object\nAt the beginning of the chapter, we defined a data frame called df based on some imported data from the US Census about migratory movements between different US cities, or more precisely, between US Metropolitan Statistical Areas. This is a large data frame containing 52,930 rows, but how can we turn this data frame into a network similar to the ones that we generated in Section 5.3. The igraph function graph_from_data_frame() can do this for us. To find out more about this function, we can run the following command:\n\nhelp(\"graph_from_data_frame\")\n\nAs we can see, the input data for graph_from_data_frame() needs to be in a certain format which is different from our migration data frame. In particular, the function requires three arguments: 1) d, which is a data frame containing an edge list in the first two columns and any additional columns are considered as edge attributes; 2) vertices, which is either NULL or a data frame with vertex metadata (i.e. vertex attributes); and 3) directed, which is a boolean argument indicating whether the network is directed or not. Our next task is therefore to obtain 1) and 2) from the migration data frame called df.\nLet us start with argument 1). Each row in df will correspond to an edge in the migration network since it contains information about a pair of origin and destination cities for two consecutive years. The names of the origin and destination cities are given by the columns in df called MSA_Previous_Name and MSA_Current_Name. In addition, the column called Movers_Metro_to_Metro_Flow_Estimate gives the number of people moving between the origin and the destination cities, so this will be the weight attribute of each edge in the migration network. Hence, we can define a data frame of edges which we will call df_edges that conforms with the format required by the argument 1) as follows:\n\n#The pipe operator used below and denoted by %>% is a feature of the magrittr package, it takes the output of one function and passes it into another function as an argument\n\n# Creates the df_edges data frame with data from df and renames the columns as \"origin\", \"destination\" and \"weight\"\ndf_edges <- data.frame(df$MSA_Previous_Name_State, df$MSA_Current_Name_State, df$Movers_Metro_to_Metro_Flow_Estimate) %>%\n  rename(origin = df.MSA_Previous_Name_State, destination = df.MSA_Current_Name_State, weight = df.Movers_Metro_to_Metro_Flow_Estimate) \n\n#Ensure that the weight attribute is stored as a number and not as character \ndf_edges$weight <- as.numeric(gsub(\",\",\"\",df_edges$weight)) \n\nFor argument 2) we can define a data frame of nodes which we will call df_nodes, where each row will correspond to a unique node or city. To obtain all the unique cities from df, we can firstly obtain a data frame of unique origin cities, then a data frame of unique destinations, and finally, apply the full_join() function to these two data frames to obtain their union, which will be df_nodes. The name of the unique cities in df_nodes is in the column called label, the other columns can be seen as the nodes metadata.\n\ndf_unique_origins <- df %>% \n  distinct(MSA_Previous_Name_State) %>%\n  rename(name = MSA_Previous_Name_State) \n\ndf_unique_destinations <- df %>%\n  distinct(MSA_Current_Name_State) %>%\n  rename(name = MSA_Current_Name_State)\n\ndf_nodes <- full_join(df_unique_origins, df_unique_destinations, by = \"name\")\n\nFinally, a directed migration network can be obtained with the following line of code. It should contain 386 nodes and 52,930 edges. You can test this yourself with the functions that you learnt in Section 5.3.\n\ng_US <- graph_from_data_frame(d = df_edges,\n                                       vertices = df_nodes,\n                                       directed = TRUE)\n\nIf we try to plot the network g3 containing the migratory movements between all the US cities with the plot() function as we did before, we obtain a result which is rather undesirable…\n\nplot(g_US)\n\n\n\n\n\n\n5.4.2 Filtering the data to create a subgraph\nWe will dedicate the entirety of next section to explore tools that can help us improve the visualisation of networks, since it is one of the most important aspects of network analysis. To facilitate the visualisation in the examples shown in Section 5.5, we will work with a subset of the full network called g_US. A way to create a subnetwork is to filter the original data frame. In particular, we will filter df to only include cities from a state, in this case, Minnesota. To filter, we use the grepl() function, which stands for grep logical. Both grep() and grepl() allow us to check whether a pattern is present in a character string or vector of a character string. While the grep() function returns a vector of indices of the element if a pattern exists in that vector, the grepl() function returns TRUE if the given pattern is present in the vector. Otherwise, it returns FALSE. In this case, we are filtering the dataset so that only the rows where the field MSA_Current_State is WA, which is the official abbreviation for Washington state.\n\ndf_sub <- df %>% filter(grepl('WA', MSA_Current_State)) %>% filter(grepl('WA', MSA_Previous_State)) #Filter the original data frame\n\nThen, we can prepare the data as we did before to create gUS. But, instead of basing the network on df, we will generate it from df_sub.\n\ndf_sub_edges <- data.frame(df_sub$MSA_Previous_Name, df_sub$MSA_Current_Name, df_sub$Movers_Metro_to_Metro_Flow_Estimate) %>%\n  rename(origin = df_sub.MSA_Previous_Name, destination = df_sub.MSA_Current_Name, weight = df_sub.Movers_Metro_to_Metro_Flow_Estimate)\n\n#Split long names into several lines for visualisation purposes\ndf_sub_edges$origin <- gsub(\"-\", \"-\\n\", df_sub_edges$origin)\ndf_sub_edges$destination <- gsub(\"-\", \"-\\n\", df_sub_edges$destination)\n\ndf_sub_edges$weight <- as.numeric(gsub(\",\",\"\",df_sub_edges$weight)) \n\ndf_sub_unique_origins <- df_sub %>% \n  distinct(MSA_Previous_Name) %>%\n  rename(name = MSA_Previous_Name) \n\ndf_sub_unique_destinations <- df_sub %>%\n  distinct(MSA_Current_Name) %>%\n  rename(name = MSA_Current_Name)\n\ndf_sub_nodes <- full_join(df_sub_unique_origins, df_sub_unique_destinations, by = \"name\")\ndf_sub_nodes$name <- gsub(\"-\", \"-\\n\", df_sub_nodes$name)\n\ng_sub <- graph_from_data_frame(d = df_sub_edges,\n                                       vertices = df_sub_nodes,\n                                       directed = TRUE)"
  },
  {
    "objectID": "network.html#sec-sec_visualise",
    "href": "network.html#sec-sec_visualise",
    "title": "5  Network Analysis",
    "section": "5.5 Network visualisation",
    "text": "5.5 Network visualisation\n\n5.5.1 Visualisation with igraph\nLet us start by generating the most basic visualisation of g_sub.\n\nplot(g_sub)\n\n\n\n\nThis plot can be improved by changing adding a few additional arguments to the plot() function. For example, by just changing the color and size of the labels, the color and size of the nodes and the arrow size of the edges, we can already see some improvements.\n\nplot(g_sub, vertex.size=10, edge.arrow.size=.2, edge.curved=0.1,\nvertex.color=\"gold\", vertex.frame.color=\"black\",\nvertex.label=V(g_sub)$name, vertex.label.color=\"black\",\nvertex.label.cex=.65)\n\n\n\n\nBut there are few more things we can do not only to improve the look of the diagram, but also to include more information about the network. For example, we can set the size of the nodes so that it reflects the total number of people that the corresponding cities receive. We can do this by adding a new node attribute, inflow, which is obtained as the sum of the rows of the adjacency matrix of g_sub.\n\nV(g_sub)$inflow <- rowSums(as.matrix(g_sub[]))\n\nBelow we set the node size based on the inflow attribute. Note the formula 0.4*(V(gsub)$inflow)^0.4, where the power of 0.4 is chosen to scale the size of the nodes in such a way that the largest ones do not get excessively large and the smallest ones do not get excessively small. We also set the edge width based on its weight, which is the total number of people migrating from the origin and destination cities that it connects.\n\n# Set node size based on inflow of migrants:\nV(g_sub)$size <- 0.4*(V(g_sub)$inflow)^0.4\n# Set edge width based on weight:\nE(g_sub)$width <- E(g_sub)$weight/1200\n\nRun the code below to discover how the aspect of the network has significantly improved with the modifications that we have introduced above.\n\nplot(g_sub, vertex.size=V(g_sub)$size, edge.arrow.size=.15, edge.arrow.width=.2, edge.curved=0.1, edge.width=E(g_sub)$width, edge.color =\"gray80\",\nvertex.color=\"gold\", vertex.frame.color=\"gray90\",\nvertex.label=V(g_sub)$name, vertex.label.color=\"black\",\nvertex.label.cex=.65)\n\n\n\n\n\n\n5.5.2 Visualisation of spatial networks\nFirstly, we will import geographical data for the metropolitan and micropolitan statistical areas in the whole of the US, using the sf package. Here, we are only interested in the metropolitan areas so we will filter the data frame cbsa_us to keep only the metropolitan areas, i.e. those entries with value M1 for the column named LSAD.\n\nlibrary(sf)\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\nlibrary(stringr)\n\n#Import core-based statistical areas https://www.census.gov/geographies/mapping-files/time-series/geo/cartographic-boundary.2020.html#list-tab-YXS5CUH5MBYOZ7MJLN\ncbsa_us <- st_read(\"./data/cb_2020_us_cbsa_500k/cb_2020_us_cbsa_500k.shp\")\n\nReading layer `cb_2020_us_cbsa_500k' from data source \n  `/Users/carmen/Library/CloudStorage/OneDrive-TheUniversityofLiverpool/GitHub/r4ps/data/cb_2020_us_cbsa_500k/cb_2020_us_cbsa_500k.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 939 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -178.3347 ymin: 17.88328 xmax: -65.56427 ymax: 65.45352\nGeodetic CRS:  NAD83\n\nmsa_us <- cbsa_us %>% filter(grepl('M1', LSAD)) #Filter the original data frame to obtain only metro areas\n\nWe will now find the centroid of each MSA polygon and add columns to msa_us for the longitude and latitude of each centroid.\n\n#Add longitude and latitude corresponding to centroid of each MSA polygon\nmsa_us$lon_centroid <- st_coordinates(st_centroid(msa_us$geometry))[,\"X\"]\nmsa_us$lat_centroid <- st_coordinates(st_centroid(msa_us$geometry))[,\"Y\"]\n\nSince we are focusing on Washington state, let us filter msa_us so that it only includes data from Washington. This requires some data manipulation via the library stringr:\n\nmsa_us$NAME_ONLY <- gsub(\",.*$\", \"\", msa_us$NAME) #Create a new column with the name of the state taken from the last two characters of entries in column NAME\n\n#Long names of MSAs are split into lines for visualisation purposes\nmsa_us$NAME_ONLY <- gsub(\"-\", \"-\\n\", msa_us$NAME_ONLY) \nmsa_us$STATE <- substr(msa_us$NAME, nchar(msa_us$NAME)-1, nchar(msa_us$NAME)) #Create a new column with the name of the state taken from the last two characters of entries in column NAME\n\nmsa_sub <- msa_us %>% filter(grepl('WA', STATE)) #Filter to keep the metro areas belonging to Washington state only\n\nWe can now plot the polygons for the MSA belonging to Washington state as well as the centroids:\n\nplot(st_geometry(msa_sub))\nplot(st_centroid(msa_sub$geometry), add=TRUE, col=\"red\", cex=0.5, pch=20)\n\n\n\n\nHowever, we still need to link this data to the network data that we obtained before. In order to incorporate the geographic information to the nodes of the migration subnetwork, we can join data from two data frames: msa_sub, which contains the geographic data, and df_sub_nodes, which contains the names of the nodes. To do this, we can use the function left_join() and then, select only the columns of interest. For more information on this magical function, check this link.\n\n#Join the data frame of nodes df_sub_nodes with the geographic information of the centroid of each MSA\ndf_sub_spatial_nodes <- df_sub_nodes %>% left_join(msa_sub, by = c(\"name\" = \"NAME_ONLY\")) %>% select(c(\"name\", \"lon_centroid\", \"lat_centroid\"))\n\n\nlo <- as.matrix(df_sub_spatial_nodes[,2:3])\n\n\nplot(st_geometry(msa_sub), border=adjustcolor(\"gray50\"))\nplot(g_sub, layout=lo, add = TRUE, rescale = FALSE, vertex.size=V(g_sub)$size, edge.arrow.size=.1, edge.arrow.width=1., edge.curved=0.1, edge.width=E(g_sub)$width, edge.color=adjustcolor(\"gray80\", alpha.f = .6), vertex.color=\"gold\", vertex.frame.color=\"gray90\",\nvertex.label=V(g_sub)$name, vertex.label.color=\"black\",\nvertex.label.cex=.45)\n\n\n\n\n\n\n5.5.3 Alternative visualisations\nIn this session we have based our visualisations on igraph, however, there exist a variety of packages that would also allow us to generate nice plots of networks.\nFor example, COMPLETE\nIn addition, migration networks are particularly well-suited to be represented as a chord diagram. If you want to explore this type of visualisation, you can find further information on the official R documentation and also, for example, on this other link link."
  },
  {
    "objectID": "network.html#sec-sec_metrics",
    "href": "network.html#sec-sec_metrics",
    "title": "5  Network Analysis",
    "section": "5.6 Network metrics",
    "text": "5.6 Network metrics\nHere we define some of the most important metrics that help us quantify different characteristics of a network. We will use the migration network for the whole of the US again, g_US. It has more nodes and edges than g_sub and consequently, its behaviour is richer and helps us illustrate better the concepts that we introduce in this section.\n\n5.6.1 Density\nThe network density is defined as the proportion of existing edges out of all the possible edges. In a network with \\(n\\) nodes, the total number of possible edges is $n\\times(n-1)$, i.e. the number of edges if each node was connected to all the other nodes. A density equal to \\(1\\) corresponds to a situation where \\(n\\times(n-1)\\) edges are present. A network with no edges at all would have density equal to \\(0\\). The line of code below tells us that the density of g_sub is approximately 0.33, meaning that about 33% of all the possible edges are present, or in other words, that there are migratory movements between almost a third of every pair of cities.\n\nedge_density(g_US, loops=FALSE)\n\n[1] 0.3283458\n\n\n\n\n5.6.2 Reciprocity\nThe reciprocity in a directed network is the proportion of reciprocated connections between nodes (i.e. number of pairs of nodes with edges in both directions) from all the existing edges.\n\nreciprocity(g_US)\n\n[1] 0.6067259\n\n\nFrom this result, we conclude that about 62% of the pairs of nodes that are connected have edges in both directions.\n\n\n5.6.3 Degree\nThe total degree of a node refers to the number of edges that emerge from or point at that node. The in-degree of a node in a directed network is the number of edges that point at it whereas the out-degree is the number of edges that emerge from it. The degree() functions, allows us to compute the degree of one or more nodes and allows us to specify if we are interested in the total degree, the in-degree or the out-degree.\n\n# Compute degree of the nodes given by v belonging to graph g_US, in this case the in-degree\ndeg <- degree(g_US, v=V(g_US), mode=\"in\")\n\n#Produces histogram of the frequency of nodes with a certain in-degree\nhist(deg, breaks = 30, main=\"Histogram of node in-degree\")\n\n\n\n\nAs we can see in the histogram, many cities receive immigrants from 60-70 different cities. Very few cities receive immigrants from 300 or above cities. We can check which is the city with the maximum in-degree.\n\nV(g_US)$name[degree(g_US, mode=\"in\")==max(degree(g_US, mode=\"in\"))]\n\n[1] \"Phoenix-Mesa-Chandler, AZ\"                   \n[2] \"Washington-Arlington-Alexandria, DC-VA-MD-WV\"\n\n\nWe actually obtain a tie between two: the MSA containing Phoenix in Arizona and the MSA containing Washington DC, which actually spans over four states. Their in-degree is 354 as we can see below.\n\ndegree(g_US, v=c(\"Phoenix-Mesa-Chandler, AZ\"), mode=\"in\")\n\nPhoenix-Mesa-Chandler, AZ \n                      354 \n\ndegree(g_US, v=c(\"Washington-Arlington-Alexandria, DC-VA-MD-WV\"), mode=\"in\")\n\nWashington-Arlington-Alexandria, DC-VA-MD-WV \n                                         354 \n\n\nNote that the fact that these two cities have the largest in-degree does not necessarily mean that they are the ones receiving the largest number of migrants.\n\n\n5.6.4 Distances\nShortest path between nodes, mean distance, diameter ,etc.\n\ndiameter(g_US)\n\n[1] 36\n\n\n\n\n5.6.5 Centrality\n\ncentr_degree(g_US, mode=\"in\", normalized=T)\n\n$res\n  [1] 198 108 330 108 283 275 127 182 116 175 104  66 251 285 187 104 344 198\n [19] 259 123 258 231 141 197 345 331 280 174  66 113 237 159 110  78 148  96\n [37] 230  63 304 261 220 132  44  73  55  76 300 169 166  95 115 333 115 121\n [55] 125 205 297  79 123  66 144  78 291 330 148  67 176 243 237 150 209 240\n [73] 311 354 105  96 282 230 277 134 228 101 279 304 276 222 110 204 316  73\n [91] 113 110 149 336  73 122 245  81 101 128  45 128 354  78 164 138 157   0\n[109]   0   0   0   0   0   0 172  33 163 276 148 132 271 167 104 103 105  26\n[127] 247 128  36 232 286  53 112 200 160  25 113 261  47  20   0  75  70 170\n[145]  61 194 202  74  81 113 170 164  72 105 221  65  92 255  92 271 216 192\n[163]  55 180 196 181  97 178 170 122 157 117  83 151 232 122 288 228 133 163\n[181] 187  70 227 186  71  68 282  64 127 185 222 240 144  54 276 156 274 157\n[199] 207 235 219 127  69  88 128 158 103 156  74 116 190 102 100 163  90 237\n[217] 104 319  93  67  68  77 179 146   0   0  76 136  68  56 131 166 115  69\n[235] 164  88 106  93 217  99  71 140 200  70  82  81 103  94 146 168 155 109\n[253]  94  95  62 113  98 103 152 123  62  98  87 165 187  76  66 117  69  93\n[271]  85 108  92  90 123 116  88 116 133 213  50  69 110 151  61  99 129  67\n[289]  72  74  65 151 161  63  83 154  93 129 117 107 132 115 145 150 155 125\n[307] 134 130 178  42  62 139 130 151 185 161  54  86  99 100  52  70  74 108\n[325]  75 119 140 128 115 121 134 139  43  52  78  47  68  69  90  87 143  80\n[343]  66  83  50 140 159  67  80 106 114  85 117 107  80 123  95  87  93  72\n[361]  86  81  81  89  63  83  93  54  66 124  55 134  60 119  75  77  81 107\n[379]  77  56  78 113  51  37  74 102  80 145 101  62  87  83 100  64  59  68\n[397]  99  67  41  76  51  46\n\n$centralization\n[1] 0.5544472\n\n$theoretical_max\n[1] 161202"
  },
  {
    "objectID": "network.html#sec-sec_distances",
    "href": "network.html#sec-sec_distances",
    "title": "5  Network Analysis",
    "section": "5.7 Distances and paths",
    "text": "5.7 Distances and paths"
  },
  {
    "objectID": "network.html#sec-sec_communities",
    "href": "network.html#sec-sec_communities",
    "title": "5  Network Analysis",
    "section": "5.7 Communities",
    "text": "5.7 Communities"
  },
  {
    "objectID": "network.html#final-visualisation",
    "href": "network.html#final-visualisation",
    "title": "5  Network Analysis",
    "section": "5.8 Final visualisation",
    "text": "5.8 Final visualisation\n\n# V(g_US)$inflow <- rowSums(as.matrix(g_US[]))\n# # Set node size based on inflow of migrants:\n# V(g_US)$size <- 0.03*(V(g_US)$inflow)^0.1\n# # Set edge width based on weight:\n# E(g_US)$width <- E(g_US)$weight/1200\n# \n# #Join the data frame of nodes df_sub_nodes with the geographic information of the centroid of each MSA\n# df_spatial_nodes <- df_nodes %>% left_join(msa_us, by = c(\"name\" = \"NAME\")) %>% select(c(\"name\", \"lon_centroid\", \"lat_centroid\"))\n# \n# lo <- as.matrix(df_spatial_nodes[,2:3])\n# \n# plot(st_geometry(msa_us), border=adjustcolor(\"gray50\"))\n# plot(g_US, layout=lo, add = TRUE, rescale = FALSE, vertex.size=V(g_US)$size, edge.arrow.size=.1, edge.arrow.width=1., edge.curved=0.1, edge.width=E(g_US)$width, edge.color=adjustcolor(\"gray80\", alpha.f = .1), vertex.color=\"gold\", vertex.frame.color=adjustcolor(\"gray100\", alpha.f = .01),\n# vertex.label=\"\", vertex.label.color=\"black\",\n# vertex.label.cex=.0)"
  }
]